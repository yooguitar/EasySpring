<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kh.easy.member.model.mapper.MemberMapper">
<sql id="selectAllFromMember">
	SELECT
		   USER_ID userId,
		   USER_PWD userPwd,
		   EMAIL,
		   ROLE,
		   STATUS,
		   ENROLL_DATE enrollDate
	  FROM
	  	   MEMBER
</sql>

<!-- 회원 서비스 -->

<insert id="join">
	INSERT 
	  INTO 
	  	  MEMBER 
  VALUES
  		(
		#{userId},
		#{userPwd},
		#{email},
		DEFAULT,
		DEFAULT,
		DEFAULT
		)
</insert>

<select id="login" parameterType="String" resultType="MemberDTO">
	SELECT
	       USER_ID userId,
	       USER_PWD userPwd,
	       EMAIL,
	       ROLE,
	       STATUS,
	       ENROLL_DATE enrollDate
	  FROM	
	       MEMBER
	 WHERE
	  	   USER_ID = #{userId}
	   AND
	       STATUS = 'Y'
</select>

<select id="findByUserId" parameterType="String" resultType="MemberDTO">
	SELECT
		   USER_ID userId
 	  FROM	
 	       MEMBER
 	 WHERE
 	 	   USER_ID = #{userId}
</select>

<update id="updateInfo" parameterType="HashMap">
	UPDATE
		   MEMBER
	   SET
	   	   USER_PWD=#{password},
	   	   EMAIL=#{email}
	 WHERE
	 	   USER_ID=#{username}
</update>

<update id="deleteByPassword" parameterType="String">
	UPDATE
		   MEMBER
	   SET
	   	   STATUS = 'N'
	 WHERE
	 	   USER_ID=#{username}
</update>

<!-- 회원 관리 콘솔 -->
<select id="findTotalCount" resultType="int">
	SELECT
		   COUNT(*)
	  FROM	
	       MEMBER
	 WHERE
	 	   STATUS = 'Y'
</select>

<select id="findMemberList" resultType="Member">
	<include refid="selectAllFromMember" />
	 WHERE
	 	   ROLE = 'ROLE_USER'
	 ORDER
	    BY
	       USER_ID DESC
</select>

<select id="findMemberListAsc" resultType="Member">
	<include refid="selectAllFromMember" />
	 WHERE
	 	   ROLE = 'ROLE_USER'
	 ORDER
	    BY
	       USER_ID ASC
</select>

<select id="findByMail" resultType="Member">
	<include refid="selectAllFromMember" />
	WHERE
		  ROLE = 'ROLE_USER'
	ORDER
	   BY
	   	  EMAIL DESC
</select>

<select id="findByMailAsc" resultType="Member">
	<include refid="selectAllFromMember" />
	WHERE
		  ROLE = 'ROLE_USER'
	ORDER
	   BY
	   	  EMAIL ASC
</select>

<select id="findByStatus" resultType="Member">
	<include refid="selectAllFromMember" />
	WHERE
	 	  ROLE = 'ROLE_USER'
	ORDER
	   BY
	   	  STATUS DESC
</select>

<select id="findByStatusAsc" resultType="Member">
	<include refid="selectAllFromMember" />
	WHERE
		  ROLE = 'ROLE_USER'
	ORDER
	   BY
	   	  STATUS ASC
</select>

<select id="findByDate" resultType="Member">
	<include refid="selectAllFromMember" />
	WHERE
		  ROLE = 'ROLE_USER'
	ORDER
	   BY
	   	  ENROLL_DATE DESC
</select>

<select id="findByDateAsc" resultType="Member">
	<include refid="selectAllFromMember" />
	WHERE
		  ROLE = 'ROLE_USER'
	ORDER
	   BY
	   	  ENROLL_DATE ASC
</select>

<select id="findAdmin" resultType="Member">
	<include refid="selectAllFromMember" />
	WHERE
		  ROLE = 'ROLE_ADMIN'
	ORDER
	   BY
	      USER_ID DESC
</select>

<update id="blockUser">
	UPDATE
		   MEMBER
	   SET
	   	   STATUS = 'N'
	 WHERE
	  	   USER_ID 
	  	IN
	       <foreach item="id" collection="list" open="(" separator="," close=")">
        		#{id}
    	   </foreach>
</update>

<update id="unblockUser">
	UPDATE
		   MEMBER
	   SET
	   	   STATUS = 'Y'
	 WHERE
	  	   USER_ID 
	  	IN
	       <foreach item="id" collection="list" open="(" separator="," close=")">
        		#{id}
    	   </foreach>
</update>

<select id="findEmail" parameterType="java.util.List" resultType="string">
	SELECT
		   EMAIL
	  FROM 	
	       MEMBER
	 WHERE
	 	   USER_ID
	 	IN
	 	   <foreach item="reciever" collection="list" open="(" separator="," close=")">
	 	   		#{reciever}
	 	   </foreach>
</select>

<select id="findEmailAll" resultType="string">
	SELECT
		   EMAIL
	  FROM	
	       MEMBER
	 WHERE
	 	   STATUS = 'Y'
</select>

<select id="findInfo" parameterType="map" resultType="string">
	SELECT
		   USER_ID
	  FROM
	       MEMBER
	 WHERE
	 	   EMAIL = #{email}
	   AND
	       STATUS = 'Y'
</select>

<select id="matchIdEmail" parameterType="map" resultType="string">
	SELECT
		   USER_ID
	  FROM
	  	   MEMBER
	 WHERE
	 	   USER_ID = #{userId}
	   AND
	       EMAIL = #{email}
	   AND
	       STATUS = 'Y'
</select> 


</mapper>